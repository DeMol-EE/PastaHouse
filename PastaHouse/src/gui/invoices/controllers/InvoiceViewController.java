/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.invoices.controllers;

import database.Database;
import database.tables.Contact;
import database.tables.Invoice;
import gui.MasterDetailViewController;
import gui.NoResultsPanel;
import gui.utilities.TextFieldAutoHighlighter;
import gui.utilities.table.InvoiceItemTableModel;
import gui.utilities.table.InvoiceTableModel;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableRowSorter;
import tools.Utilities;

/**
 *
 * @author Warkst
 */
public class InvoiceViewController extends javax.swing.JPanel implements MasterDetailViewController<Invoice> {

    private Map<String, RowFilter<Object, Object>> filters;
    private TableRowSorter<InvoiceTableModel> sorter;
    private InvoiceTableModel tableModel;
    
    /**
     * Creates new form InvoiceViewController
     */
    public InvoiceViewController() {
	initComponents();
	
	tableModel = new InvoiceTableModel(Database.driver().getInvoicesByNumber());
	
	invoiceTableOutlet.setModel(tableModel);
	
	invoiceTableOutlet.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

	    @Override
	    public void valueChanged(ListSelectionEvent e) {
		if (!e.getValueIsAdjusting()) {
		    updateDetail(tableModel.getInvoiceAtRow(invoiceTableOutlet.getSelectedRow()));
		}
	    }
	});
	
	filters = new HashMap<String, RowFilter<Object, Object>>();
	sorter = new TableRowSorter<InvoiceTableModel>(tableModel);
	
	invoiceTableOutlet.setRowSorter(sorter);
	invoiceTableOutlet.setRowHeight(invoiceTableOutlet.getRowHeight()+Utilities.fontSize()-10);
	
//	articleTableOutlet.setRowHeight(articleTableOutlet.getRowHeight()+Utilities.fontSize()-10);
	
//	invoiceTableOutlet.setRowSelectionInterval(0, 0);
	
	TextFieldAutoHighlighter.installHighlighter(clientFilterOutlet);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noResultOutlet = new javax.swing.JLabel();
        filterPanel = new javax.swing.JPanel();
        numberFilterOutlet = new javax.swing.JTextField();
        clientFilterOutlet = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceTableOutlet = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        invoices = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        noResultOutlet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noResultOutlet.setText("Geen resultaten");

        setLayout(new java.awt.BorderLayout());

        filterPanel.setLayout(new java.awt.GridLayout(1, 2));

        numberFilterOutlet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberFilterOutletKeyReleased(evt);
            }
        });
        filterPanel.add(numberFilterOutlet);

        clientFilterOutlet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientFilterOutletKeyReleased(evt);
            }
        });
        filterPanel.add(clientFilterOutlet);

        add(filterPanel, java.awt.BorderLayout.NORTH);
        filterPanel.getAccessibleContext().setAccessibleName("");

        invoiceTableOutlet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(invoiceTableOutlet);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        invoices.setText("Toevoegen...");
        invoices.setFocusable(false);
        invoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoicesActionPerformed(evt);
            }
        });
        jPanel2.add(invoices);

        edit.setText("Details...");
        edit.setFocusable(false);
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        jPanel2.add(edit);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void updateFilter(){
	List<RowFilter<Object, Object>> filters_ = new ArrayList<RowFilter<Object, Object>>();
	
	for (RowFilter<Object, Object> rowFilter : filters.values()) {
	    if (rowFilter!=null) {
		filters_.add(rowFilter);
	    }
	}
	
	sorter.setRowFilter(RowFilter.andFilter(filters_));
		
//	if (invoiceTableOutlet.getRowCount() == 0) {
//	    System.out.println("There are no results");
//	    detail.remove(results);
//	    detail.add(new NoResultsPanel(), BorderLayout.CENTER);
//	} else {
//	    invoiceTableOutlet.setRowSelectionInterval(0, 0);
//	    detail.removeAll();
//	    detail.add(results);
//	}
	validate();
	repaint();
    }
    
    private void numberFilterOutletKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberFilterOutletKeyReleased
        if (!numberFilterOutlet.getText().isEmpty()) {
	    filters.put("date", RowFilter.regexFilter(numberFilterOutlet.getText(), 0));
	} else {
	    filters.put("date", null);
	}
	
	updateFilter();
	
    }//GEN-LAST:event_numberFilterOutletKeyReleased

    private void clientFilterOutletKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientFilterOutletKeyReleased
        if (!clientFilterOutlet.getText().isEmpty()) {
	    filters.put("client", RowFilter.regexFilter(clientFilterOutlet.getText(), 1));
	} else {
	    filters.put("client", null);
	}
	
	updateFilter();
    }//GEN-LAST:event_clientFilterOutletKeyReleased

    private void invoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoicesActionPerformed
//        if(listOutlet.getSelectedValue()!=null) parent.switchToInvoicesAndFilterByClient((Contact)listOutlet.getSelectedValue());
    }//GEN-LAST:event_invoicesActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
//        final ClientViewController me = this;
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                if(listOutlet.getSelectedValue()!=null) EditContactDialog.createClientDialog(me, (Contact)listOutlet.getSelectedValue()).setVisible(true);
//            }
//        });
    }//GEN-LAST:event_editActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clientFilterOutlet;
    private javax.swing.JButton edit;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JTable invoiceTableOutlet;
    private javax.swing.JButton invoices;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noResultOutlet;
    private javax.swing.JTextField numberFilterOutlet;
    // End of variables declaration//GEN-END:variables

    public void filterByClient(Contact c){
	clientFilterOutlet.setText(c.getSortKey());
	clientFilterOutletKeyReleased(null);
    }
    
    @Override
    public void updateDetail(Invoice value) {
//	clientOutlet.setText(value.getClient().getSortKey());
//	dateOutlet.setText(value.getDate());
//	priceOutlet.setText(value.getPriceCode());
//	
//	articleTableOutlet.setModel(new InvoiceItemTableModel(value.items()));
    }
    
    @Override
    public void electFirstResponder() {
	invoiceTableOutlet.requestFocus();
    }

    @Override
    public JPanel view() {
	return this;
    }

    @Override
    public JMenu menu() {
	return null;
    }
}
