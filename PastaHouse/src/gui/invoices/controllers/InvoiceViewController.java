/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.invoices.controllers;

import database.Database;
import database.tables.Invoice;
import gui.MasterDetailViewController;
import gui.utilities.table.invoicetable.CustomColumnFactory;
import gui.utilities.table.invoicetable.InvoiceFiltering;
import gui.utilities.table.invoicetable.InvoiceRendering;
import gui.utilities.table.invoicetable.InvoiceTableModel;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTableHeader;
import org.jdesktop.beans.*;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import static org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ;
import org.jdesktop.swingx.decorator.HighlighterFactory;

/**
 *
 * @author Warkst
 */
public class InvoiceViewController extends javax.swing.JPanel implements MasterDetailViewController<Invoice> {

    private Map<String, RowFilter<Object, Object>> filters;
    private TableRowSorter<InvoiceTableModel> sorter;
    private InvoiceTableModel tableModel;
    private JXTable table;
    private JTextField clientField;
    private InvoiceFiltering filterController;
    private JPanel controlPanel;

    /**
     * Creates new form InvoiceViewController
     */
    public InvoiceViewController() {
        initComponents();
        controlPanel = createControlPanel(); 
        tablePanel.add(controlPanel, BorderLayout.NORTH);
        table = createXTable();
        JScrollPane scrollpane = new JScrollPane(table);
        table.setName("invoiceTable");
        tablePanel.add(scrollpane, BorderLayout.CENTER); 
        configureDisplayProperties();
        bind();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noResultOutlet = new javax.swing.JLabel();
        filterPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        invoices = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        noResultOutlet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noResultOutlet.setText("Geen resultaten");

        setLayout(new java.awt.BorderLayout());

        filterPanel.setLayout(new java.awt.GridLayout(1, 2));
        add(filterPanel, java.awt.BorderLayout.NORTH);
        filterPanel.getAccessibleContext().setAccessibleName("");

        tablePanel.setLayout(new java.awt.BorderLayout());
        add(tablePanel, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        invoices.setText("Toevoegen...");
        invoices.setFocusable(false);
        invoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoicesActionPerformed(evt);
            }
        });
        jPanel2.add(invoices);

        edit.setText("Details...");
        edit.setFocusable(false);
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        jPanel2.add(edit);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void invoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoicesActionPerformed
    }//GEN-LAST:event_invoicesActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
    }//GEN-LAST:event_editActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton edit;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JButton invoices;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel noResultOutlet;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateDetail(Invoice value) {
//	clientOutlet.setText(value.getClient().getSortKey());
//	dateOutlet.setText(value.getDate());
//	priceOutlet.setText(value.getPriceCode());
//	
//	articleTableOutlet.setModel(new InvoiceItemTableModel(value.items()));
    }

    @Override
    public JPanel view() {
        return this;
    }

    @Override
    public JMenu menu() {
        return null;
    }

    private JXTable createXTable() {
        JXTable table = new JXTable() {
            @Override
            protected JTableHeader createDefaultTableHeader() {
                return new JXTableHeader(columnModel) {
                    @Override
                    public void updateUI() {
                        super.updateUI();
                        // need to do in updateUI to survive toggling of LAF 
                        if (getDefaultRenderer() instanceof JLabel) {
                            ((JLabel) getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

                        }
                    }
                    //                    </snip> 
                };
            }
        };
        return table;
    }

    protected JPanel createControlPanel() {
        JPanel controlPanel = new JPanel();
        GridBagLayout gridbag = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        controlPanel.setLayout(gridbag);

        c.gridx = 0;
        c.gridy = 1;
        c.gridheight = 1;
        c.insets = new Insets(20, 10, 0, 10);
        c.anchor = GridBagConstraints.SOUTHWEST;
        JLabel searchLabel = new JLabel();
        searchLabel.setName("searchLabel");
        controlPanel.add(searchLabel, c);

        c.gridx = 0;
        c.gridy = 2;
        c.weightx = 1.0;
        c.insets.top = 0;
        c.insets.bottom = 12;
        c.anchor = GridBagConstraints.SOUTHWEST;
        //c.fill = GridBagConstraints.HORIZONTAL; 
        clientField = new JTextField(24);
        controlPanel.add(clientField, c);

        c.gridx = 1;
        c.gridy = 2;
        c.gridwidth = GridBagConstraints.REMAINDER;
        //c.insets.right = 24; 
        //c.insets.left = 12; 
        c.weightx = 0.0;
        c.anchor = GridBagConstraints.EAST;
        c.fill = GridBagConstraints.NONE;

        return controlPanel;
    }

    private void bind() {
        tableModel = new InvoiceTableModel(Database.driver().getInvoicesById());
        table.setModel(tableModel);
        filterController = new InvoiceFiltering(table);
//        BindingGroup filterGroup = new BindingGroup();
//        filterGroup.addBinding(Bindings.createAutoBinding(READ,
//                clientField, BeanProperty.create("text"),
//                filterController, BeanProperty.create("clientString")));
//        System.out.println("binded!");
//        filterGroup.addBinding(Bindings.createAutoBinding(READ,  
//                 filterController, BeanProperty.create("clientString"), 
//                 this, BeanProperty.create("statusContent"))); 
//        filterGroup.bind();
        clientField.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                filterController.setClientString(clientField.getText());
            }
        });

        
    }
    
    

    @Override
    public void electFirstResponder() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void configureDisplayProperties() {
        table.setColumnControlVisible(true);
        table.setShowGrid(false, false);
        table.addHighlighter(HighlighterFactory.createAlternateStriping());
        table.setVisibleRowCount(10);
        CustomColumnFactory factory = new CustomColumnFactory();
        InvoiceRendering.configureColumnFactory(factory, getClass());
        table.setColumnFactory(factory);
    }

    
    
    
}
